<%- include('./layout/header.ejs')%>

<div class="p-5">
    <h1 class="text-3xl font-bold mb-4 text-center">HTTP Module</h1>
    <p>The <strong>http module</strong> is a core module in Node.js that provides functionality to create an HTTP server and make HTTP requests. It allows you to handle incoming HTTP requests and send responses.</p>

    <ul class="list-disc pl-4">
        <li>
            <strong>Creating an HTTP Server:</strong>
            <p>You can create a simple HTTP server using the <code>http.createServer</code> method. Here's a basic example:</p>
            <pre class="rounded-md md:w-1/2 w-full overflow-y-scroll"><code class="language-javascript">
const http = require('http');

// Create an HTTP server
const server = http.createServer((req, res) => {
// Set the response header
res.writeHead(200, { 'Content-Type': 'text/plain' });

// Send a response
res.end('Hello, World!\n');
});

// Listen on port 3000
server.listen(3000, () => {
console.log('Server is running on port 3000');
});
            </code></pre>
        </li>

        <li>
            <strong>Handling Different HTTP Methods:</strong>
            <p>You can handle different HTTP methods (GET, POST, etc.) by checking the <code>req.method</code> property. Here's an example that handles both GET and POST requests:</p>
            <pre class="rounded-md md:w-1/2 w-full overflow-y-scroll"><code class="language-javascript">
const http = require('http');

const server = http.createServer((req, res) => {
if (req.method === 'GET') {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('GET request received\n');
} else if (req.method === 'POST') {
  let data = '';

  req.on('data', (chunk) => {
    data += chunk;
  });

  req.on('end', () => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end(`POST request received with data: ${data}\n`);
  });
} else {
  res.writeHead(404, { 'Content-Type': 'text/plain' });
  res.end('Not Found\n');
}
});

server.listen(3000, () => {
console.log('Server is running on port 3000');
});
            </code></pre>
        </li>
        
        <li>
            <strong>Handling Routes:</strong>
            <p>You can create a simple routing mechanism based on the <code>req.url</code> property. Here's an example:</p>
            <pre class="rounded-md md:w-1/2 w-full overflow-y-scroll"><code class="language-javascript">
const http = require('http');

const server = http.createServer((req, res) => {
if (req.url === '/') {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Home Page\n');
} else if (req.url === '/about') {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('About Page\n');
} else {
  res.writeHead(404, { 'Content-Type': 'text/plain' });
  res.end('Not Found\n');
}
});

server.listen(3000, () => {
console.log('Server is running on port 3000');
});
            </code></pre>
        </li>
    </ul>
</div>

<%- include('./layout/footer.ejs')%>